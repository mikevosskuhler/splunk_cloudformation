AWSTemplateFormatVersion: "2010-09-09"
Description: Splunk Cluster containing two instances, an indexer and an search head. These instances are exposed to the internet through loadbalancers
Parameters:
  instanceType:
    Type: string
    Default: t2.micro
    Description: instance size
  ami:
    Type: string
    Default: ami-splunkami
    Description: ami to use for splunk instance
  subdomain:
    Type: string
    Default: splunk.vosskuhler.com
    Description: subdomain to use for elb
Resources: 
  splunkVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnabledDnsSupport: 'false'
      EnableDnsHostnames: 'false'
      InstanceTenancy: dedicated
  publicSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: splunkVPC
      Cidrblock: 10.0.1.0/24
      AvailabilityZone: eu-central-1
  privateSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: splunkVPC
      Cidrblock: 10.0.2.0/24
      AvailabilityZone: eu-central-1
  internetGateway:
    Type: AWS::EC2::InternetGateway
    DependsOn: splunkVPC
  attachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties: 
      VpcId:
        Ref: splunkVPC
      InternetGatewayId:
        Ref: internetGateway
  publicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId:
        Ref: splunkVPC
  publicRoute:
    Type: AWS::EC2::Route
    DependsOn: attachGateway
    Properties:
      RouteTableId: 
        Ref: publicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId:
        Ref: internetGateway
  privateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId:
        Ref: splunkVPC
  PrivateRoute:
    Type: AWS::EC2::Route
    Propeties:
      RouteTableId:
        Ref: privateRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId:
        Ref: natGateway
  natGateway:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId:
        GetAtt: elasticIpAddress.AllocationId
      SubnetId:
        Ref: publicSubnet
  elasticIpAddress:
    Type: AWS::EC2::EIP
    Properties:
      Domain: splunkVPC
  publicSubnetRouteAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId:
        Ref: publicSubnet
      RouteTableId:
        Ref: publicRouteTable
  privateSubnetRouteAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId:
        Ref: privateSubnet
      RouteTableId:
        Ref: privateRouteTable
  splunkSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: "Splunk security group"
      GroupDescription: "Security group for splunk instance"
      VpcId:
        Ref: splunkVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 8000
          ToPort: 8000
          CidrIp: 10.0.1.0/24
        - IpProtocol: tcp
          FromPort: 8088
          ToPort: 8088
          CidrIp: 10.10.1.0/24
  elbSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: "elb security group"
      GroupDescription: "elb group for splunk elb"
      VpcId:
        Ref: splunkVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 8088
          ToPort: 8088
          CidrIp: 0.0.0.0/24
  splunkInstance:
    Type: AWS::EC2::Instance
    Properties:
      ImageId:
        Ref: AMI
      InstanceType:
        Ref: instanceType
      SubnetId:
        Ref: privateSubnet
      SecurityGroupIds:
        Ref: splunkSecurityGroup
  guiTargetGroup:
    Type: AWS::ElasticLoadBalancerV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 30
      HealthCheckProtocol: HTTPS
      HealthCheckTimeoutSeconds: 15
      HealthyThresholdCount: 3
      Matcher:
        HttpCode: '200'
      Name: splunkTargetGroup
      Targets:
        - Id:
            Ref: splunkInstance
          Port: 443
      VpcId:
        Ref: splunkVPC
  hecTargetGroup:
    Type: AWS::ElasticLoadBalancerV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 30
      HealthCheckProtocol: HTTPS
      HealthCheckTimeoutSeconds: 15
      HealthyThresholdCount: 3
      Matcher:
        HttpCode: '200'
      Name: splunkTargetGroup
      Targets:
        - Id:
            Ref: splunkInstance
          Port: 8088
      VpcId:
        Ref: splunkVPC 
  guiListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn:
            Ref: guiTargetGroup
      LoadBalancerArn:
        Ref: applicationLoadBalancer
      Port: 443
      Protocol: https
      Certificates:
        - 
          CertificateArn:
            Ref: certificate
  hecListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn:
            Ref: hecTargetGroup
      LoadBalancerArn:
        Ref: applicationLoadBalancer
      Port: 8088
      Protocol: https
      Certificates:
        - 
          CertificateArn:
            Ref: certificate 
  applicationLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Scheme: internet-facing
      Subnets:
        - Ref: publicSubnet
      SecurityGroups:
        - Ref: elbSecurityGroup
  certificate:
    Type: AWS::CertificateManager::Certificate
    Properties:
      DomainName: 
  dnsrecord:
    Type: AWS::Route53::RecordSet
    Properties:
      HostedZoneName: vosskuhler.com
      Name:
        Ref: subdomain
      Type: A
      AliasTarget:
        HostedZoneId:
          GetAtt: applicationLoadBalancer.CanonicalHostedZoneNameID
        DNSName: 
          GetAtt: applicationLoadBalancer.DNSName
Outputs:
  instance:
    Description: instance id
    Value:
      Ref: splunkInstance
